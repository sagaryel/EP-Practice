service: employee-portal-service
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  environment:
    EMPLOYEE_TABLE: ${self:custom.employeeTableName}
    ASSIGNMENTS_TABLE: ${self:custom.assignmentTableName}
    ASSETS_TABLE: ${self:custom.assetTableName}
    BANK_TABLE: ${self:custom.bankTableName}
    PF_ESI_TABLE : ${self:custom.pfTableName}
    DOCUMENT_TABLE : ${self:custom.documentTableName}
    SENDGRID_API_KEY: "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"
    API_Key_ID: "j-Cqgw36SP6L2W5HfIM-vA"
    TEMPLATE_ID: "d-a8a35d647ac547acb9bdd28a3fe83f2a"
    SENDER_MAIL_ID: "hr@hyniva.com"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
      Resource:
        - !GetAtt EmployeeTable.Arn
        - !GetAtt AssignmentTable.Arn
        - !GetAtt AssetTable.Arn
        - !GetAtt BankTable.Arn
        - !GetAtt PfDetailsTable.Arn
        - !GetAtt documentsDetailsTable.Arn
custom:
  employeeTableName: employee-Details-${self:provider.stage}
  assignmentTableName: assignment-Details-${self:provider.stage}
  assetTableName: asset-Details-${self:provider.stage}
  bankTableName: bank-${self:provider.stage}
  pfTableName: pf-esi-Details
  documentTableName: document-details
plugins:
  - serverless-iam-roles-per-function
functions:
  employeeCreate:
    handler: src/Lamda/employee/employeeCreateHandler.createEmployee
    name: employeeCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employee
          method: POST
  assignmentCreate:
    handler: src/Lamda/assignment/assignmentHandler.createAssignment
    name: assignmentCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment
          method: POST
  assignmentGet:
    handler: src/Lamda/employee/employeeCreateHandler.getAssignmentsByEmployeeId
    name: assignmentGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assignment/{employeeId}
          method: GET
  assetCreate:
    handler: src/Lamda/asset/assetHandler.createAsset
    name: assetCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset
          method: POST
  assetUpdate:
    handler: src/Lamda/employee/employeeCreateHandler.updateAssetDetails
    name: assetUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: asset/{assetId}
          method: PUT
  bankCreate:
    handler: src/Lamda/bank/bankHandler.createBankDetails
    name: bankCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank
          method: POST
  bankGet:
    handler: src/Lamda/employee/employeeCreateHandler.getBankDetailsByEmployeeId
    name: bankGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank/{employeeId}
          method: GET
  bankUpdate:
    handler: src/Lamda/employee/employeeCreateHandler.updateBankDetails
    name: bankUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: bank/update/{bankId}
          method: PUT
  pfEsiUpdate:
    handler: src/Lamda/employee/employeeCreateHandler.updatePfDetails
    name: PfUpdate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: pf/{employeeId}
          method: PUT
  pfEsiCreate:
    handler: src/Lamda/employee/employeeCreateHandler.createPfDetails
    name: PfCreate
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: pf/create
          method: POST
  pfEsiGet:
    handler: src/Lamda/employee/employeeCreateHandler.getPfOrEsiDetailsByEmployeeId
    name: PfEsiGet
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: pf/{employeeId}
          method: GET
  employeeGetAll:
    handler: src/Lamda/employee/employeeCreateHandler.getAllEmployees
    name: employeeGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: employees
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                pageNo : true
                pageSize : true
  assetGetAll:
    handler: src/Lamda/employee/employeeCreateHandler.getAllEmployeesAsset
    name: assetGetAll
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: assets
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                pageNo : true
                pageSize : true
  documentUpload:
    handler: src/Lamda/employee/employeeCreateHandler.documentUpload
    name: documentUpload
    memorySize: 128
    timeout: 300 # Adjust timeout as per your requirement
    events:
      - http:
          path: document/upload
          method: POST
          cors: true
          request:
            contentHandling: CONVERT_TO_BINARY
  createDocument:
    handler: src/Lamda/employee/employeeCreateHandler.createEmployeeDocument
    name: createDocument
    memorySize: 128
    timeout: 120
    events:
      - http:
          path: documennt
          method: POST
  uploadDocument:
    handler: src/Lamda/employee/employeeCreateHandler.uploadDocument
    name: uploadDocument
    memorySize: 256
    timeout: 240
    events:
      - http:
          path: documennt/{documentId}
          method: PUT
          cors: true    
resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AssignmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assignmentTableName}
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: N
          - AttributeName: employeeId
            AttributeType: S
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmployeeIndex
            KeySchema:
              - AttributeName: employeeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    AssetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.assetTableName}
        AttributeDefinitions:
          - AttributeName: assetId
            AttributeType:  N
        KeySchema:
          - AttributeName: assetId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BankTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bankTableName}
        AttributeDefinitions:
          - AttributeName: bankId
            AttributeType: N
        KeySchema:
          - AttributeName: bankId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    PfDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.pfTableName}
        AttributeDefinitions:
          - AttributeName: pfId
            AttributeType: N
        KeySchema:
          - AttributeName: pfId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    documentsDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.documentTableName}
        AttributeDefinitions:
          - AttributeName: documentId
            AttributeType: N
        KeySchema:
          - AttributeName: documentId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1